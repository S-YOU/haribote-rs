alpha    = _{ 'a' .. 'z' | 'A' .. 'Z' }
comma    = _{ "," }
dquate   = _{ "\"" }
dollar   = _{ "$" }
hyphen   = _{ "-" }
underbar = _{ "_" }
space    = _{ " " }
colon    = _{ ":" }
lbranket = _{ "[" }
rbranket = _{ "]" }
ws       = _{ " " | "\r" | "\n" | "\t" }
empty    =  { ws* }

str     =  { (alpha | space | underbar | comma | hyphen | digit)* }
string  = _{ dquate ~ str ~ dquate } 

digit = _{ '0'..'9' }
num   = _{ '1'..'9' ~ digit* | "0" }

//caution! overflow
dec8  = { num } 
dec16 = { num }
dec32 = { num }

hex   = _{ '0'..'9' | 'a'..'f' | 'A'..'F' }

_hex8  = _{ "0x" ~ hex{2} }
_hex16 = _{ "0x" ~ hex{4} }
_hex32 = _{ "0x" ~ hex{8} }

hex8  = { _hex8  }
hex16 = { _hex16 }
hex32 = { _hex32 }

imm8  = { dec8  | hex8  } 
imm16 = { dec16 | hex16 }
imm32 = { dec32 | hex32 }

//a hex number: 0x10, 0x3456, 0x9090AABB
prefix  = _{ "0x" }
prehex2 = _{ prefix ~ hex{2} }
prehex4 = _{ prefix ~ hex{4} }
prehex8 = _{ prefix ~ hex{8} }


//DB, DW, DD, RESB instructions
db      =  { "DB" }
db_exp  = _{ db ~ ws* ~ imm8 ~ ws* ~ (comma ~ ws* ~ imm8)*
           | db ~ ws* ~ string } 

dw      =  { "DW" }
dw_exp  = _{ dw ~ ws* ~ imm16 }

dd      =  { "DD" }
dd_exp  = _{ dd ~ ws* ~ imm32 }

resb     =  { "RESB" }
resb_exp = _{ resb ~ ws* ~ (imm16 ~ ws* ~ hyphen ~ ws* ~ dollar | imm16 )}

//16-bit register 
//AX CX DX BX SP BP SI DI
//AL CL DL BL AH CH DH BH
//ES, CS, SS, DS, FS, GS
//32-bit 
//EAX, ECX, EDX, EBX, ESP, EBP, ESI, EDI
ax = { "AX" } cx = { "CX" } dx = { "DX" } bx = { "BX" }
sp = { "SP" } bp = { "BP" } si = { "SI" } di = { "DI" }
al = { "AL" } cl = { "CL" } dl = { "DL" } bl = { "BL" }
ah = { "AH" } ch = { "CH" } dh = { "DH" } bh = { "BH" }
es = { "ES" } cs = { "CS" } ss = { "SS" } ds = { "DS" }
fs = { "FS" } gs = { "GS" }
eax = { "EAX" } ecx = { "ECX" } edx = { "EDX" } ebx = { "EBX" } esp = { "ESP" }
ebp = { "EBP" } esi = { "ESI" } edi = { "EDI" }
regi8  = _{ al | cl | dl | bl | ah | ch | dh | bh }
regi16 = _{ ax | cx | dx | bx | sp | bp | si | di | es | cs | ss | ds | fs | gs }
regi32 = _{ eax | ecx | edx | ebx | esp | ebp | esi | edi }

//ORG     0x7c00  
org = { "ORG" }
org_exp  = _{ org ~ ws* ~ hex8 } //10進数表示を受け付けない？

//JMP label
//:label
jmp = { "JMP" }
label = { alpha+ }
jmp_exp = _{ jmp ~ ws* ~ label }

je = { "JE" }
je_exp = _{ je ~ ws* ~ label }

dist_label = _{ label ~ colon }




add = { "ADD" }
add_exp = _{ add ~ ws* ~ si ~ ws* ~ comma ~ ws* ~ num }

cmp = { "CMP" }
cmp_exp = _{ cmp ~ ws* ~ al ~ ws* ~ comma ~ ws* ~ num } 

int = { "INT" }
int_exp = _{ int ~ ws* ~ prehex2 }

hlt = { "HLT" }

mov = { "MOV" }
//mov_exp = _{ mov ~ ws* ~ (regi8  ~ ws* ~ (prehex2 | num | label) | 
//                          regi16 ~ ws* ~ (prehex4 | num | label) |
//                          regi32 ~ ws* ~ (prehex8 | num | label) |

mov_exp = _{ mov ~ ws* ~ (ss | es | ds | sp | si | ah | bx ) ~ ws* ~ comma ~ ws* ~ (ax | imm16 | imm8) }



exp = _{ ws* ~ 
    (db_exp | dw_exp | dd_exp | resb_exp | org_exp | jmp_exp | dist_label 
     | int_exp | add_exp | cmp_exp | hlt | mov_exp )
        ~ ws* | empty }

        

